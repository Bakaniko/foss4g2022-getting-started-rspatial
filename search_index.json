[["index.html", "Getting started with R and R-spatial About", " Getting started with R and R-spatial Nicolas Roelandt and Jakub Nowosad 2022-07-19 About This is the teaching materials for a workshop introducing R and R-spatial at the FOSS4G2022 conference. "],["introduction.html", "Introduction 0.1 Schedule 0.2 Pre-requisites 0.3 What is love R ? 0.4 Why an R workshop in a FOSS4G conference ? 0.5 Coding paradigms", " Introduction This workshops aims to provide the very basics of R to newcomers and a first introduction to spatial data handling in R using the R-spatial ecosystem. We will present to the audience mapping with the {tmap} package, vector data handling with {sf} and raster data handling with {terra}. No previous knowledge of R is required. The workshop leaders are Jakub Nowosad from Adam Mickiewicz University (Poznań, Poland) and Nicolas Roelandt from Gustave Eiffel university (Lyon, France). 0.1 Schedule Introduction to the workshop (5 min) Introduction to R (15 min) Non-spatial data handling (30 min) Introduction to R-spatial ecosystem (20 min) Mapping in R with {tmap} (30 min) Pause (to be confirmed) Vector data processing (45 min) Raster data processing (45 min) Closing of the workshop (5 min) 0.2 Pre-requisites A working installation of R (following CRAN recommandations for your computer) R packages Please run those commands into the R console: packages &lt;- c( tmaptools, tmap, spData, sf, terra, supercells) # Install packages from CRAN Repo install.packages(packages) # Install spDataLarge that is not on CRAN repo install.packages(&quot;spDataLarge&quot;, repos = &quot;https://geocompr.r-universe.dev&quot;) 0.3 What is love R ? R is a programming language dedicated to data science. It can compute statistics and produce graphics and reports (and much more). It was created by Ross Ihaka and Robert Gentleman in 1993 and was released as a Free and Open Source Software in 1995. 0.4 Why an R workshop in a FOSS4G conference ? While R is not dedicated to spatial analysis, there is several packages that provides geospatial capabilities to the langage. use R a standalone GIS: read and write geospatial data connect to geospatial data base perform spatial analysis compute geostatistical modelling, prediction and simulation access to algorithms from other tools (QGIS, GRASS, SAGA) Use R in other FOSS4G tools: QGIS GRASS 0.5 Coding paradigms When R has been released as an Open Source language, there was no strong syntax philosophy so there is some inconstancies in packages, functions and parameters naming for example. R base readibility and performances where not good enough for some users so they developped packages to improve thoses. When using R for data analysis, you will encounter 3 majors coding paradigms: R base Tidyverse data.table R base is vanilla R code. The Tidyverse aims to provide a more consistent grammar and readibility. Data.table provides a fast and powerful alternative to R base with a consistent grammar. You can mix the paradigms for your projects but for teaching purposes, the workshop materials will use the Tidyverse with some R base. "],["data-handling-with-r.html", "Chapter 1 Data handling with R", " Chapter 1 Data handling with R "],["introduction-to-the-r-spatial-ecosystem.html", "Chapter 2 Introduction to the R-spatial ecosystem 2.1 R packages - specialized packages 2.2 R’s spatial ecosystem(s)", " Chapter 2 Introduction to the R-spatial ecosystem https://www.r-spatial.org/ https://www.rspatial.org/ https://geocompr.github.io/ #rspatial and #geocompr on Twitter What can you do with geographic data + R? Exploratory data analysis (EDA) Output data in different formats (e.g. creating a .GeoTIFF or .shp file to share with others) Data processing (e.g. adding new variables, ‘adding value’) Data transformation (e.g. changing CRS, reducing size via simplification/aggregation) Data visualization Web application development Software development e.g. to share new methods sf, sp, terra, raster, stars - spatial classes dplyr, rmapshaper - processing of attribute tables/geometries rnaturalearth, osmdata, getSpatialData - spatial data download rgrass7, qgisprocess, RSAGA, link2GI - connecting with GIS software gstat, mlr3, CAST - spatial data modeling rasterVis, tmap, ggplot2 - static visualizations leaflet, mapview, mapdeck - interactive visualizations many more… 2.1 R packages - specialized packages spatstat spdep spatialreg dismo landscapemetrics - part of https://github.com/r-spatialecology RStoolbox rayshader gdalcubes sfnetworks many more… Learn more at https://cran.r-project.org/web/views/Spatial.html. 2.2 R’s spatial ecosystem(s) rspatial vs r-spatial Old vs New Legacy Other R ecosystems … Figure 2.1: Source: https://geocompr.robinlovelace.net Figure 2.2: Source: https://www.r-spatial.org/r/2020/03/17/wkt.html 2.2.1 Conversions https://geocompr.github.io/post/2021/spatial-classes-conversion/ "],["making-maps-in-r.html", "Chapter 3 Making maps in R 3.1 Mapping tools in R 3.2 tmap intro 3.3 Shapes and layers 3.4 Attributes layers 3.5 Other map elements 3.6 Interactive mode 3.7 Saving maps 3.8 What else? 3.9 More resources 3.10 Exercises", " Chapter 3 Making maps in R library(tmap) library(sf) library(terra) library(spData) data(&quot;nz&quot;) nz_ports = read_sf(&quot;data/nz_ports.gpkg&quot;) nz_elev = rast(system.file(&quot;raster/nz_elev.tif&quot;, package = &quot;spDataLarge&quot;)) 3.1 Mapping tools in R Static maps: graphics rasterVis ggplot2 ggspatial mapsf … Interactive maps: leaflet mapview mapdeck … Both: tmap Specific-purpose mapping: cartogram geofacet geogrid rayshader … 3.2 tmap intro tm_shape(nz) + tm_graticules() + tm_polygons(col = &quot;Median_income&quot;) + tm_shape(nz_ports) + tm_symbols(size = 0.75) + tm_scale_bar(breaks = c(0, 100, 200)) + tm_compass(position = c(&quot;right&quot;, &quot;top&quot;)) + tm_layout(bg.color = &quot;lightblue&quot;) 3.3 Shapes and layers Table 3.1: Basic map layers Function Geometry tm_polygons() polygons tm_symbols() points, lines, and polygons tm_lines() lines tm_raster() raster tm_text() points, lines, and polygons tm_shape(nz) + tm_polygons() tm_shape(nz) + tm_polygons(col = &quot;darkblue&quot;) #or #00008b tm_shape(nz) + tm_polygons(col = &quot;MAP_COLORS&quot;) head(nz) ## Simple feature collection with 6 features and 6 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: 1568217 ymin: 5518431 xmax: 2089533 ymax: 6191874 ## Projected CRS: NZGD2000 / New Zealand Transverse Mercator 2000 ## Name Island Land_area Population Median_income Sex_ratio ## 1 Northland North 12500.561 175500 23400 0.9424532 ## 2 Auckland North 4941.573 1657200 29600 0.9442858 ## 3 Waikato North 23900.036 460100 27900 0.9520500 ## 4 Bay of Plenty North 12071.145 299900 26200 0.9280391 ## 5 Gisborne North 8385.827 48500 24400 0.9349734 ## 6 Hawke&#39;s Bay North 14137.524 164000 26100 0.9238375 ## geom ## 1 MULTIPOLYGON (((1745493 600... ## 2 MULTIPOLYGON (((1803822 590... ## 3 MULTIPOLYGON (((1860345 585... ## 4 MULTIPOLYGON (((2049387 583... ## 5 MULTIPOLYGON (((2024489 567... ## 6 MULTIPOLYGON (((2024489 567... tm_shape(nz) + tm_polygons(col = &quot;Median_income&quot;) tm_shape(nz) + tm_polygons(col = &quot;Median_income&quot;, title = &quot;Median income (USD)&quot;, palette = &quot;viridis&quot;) tmaptools::palette_explorer() tm_shape(nz) + tm_polygons(col = &quot;Median_income&quot;, title = &quot;Median income (USD)&quot;, palette = &quot;viridis&quot;) tm_shape(nz) + tm_polygons(col = &quot;Median_income&quot;, title = &quot;Median income (USD)&quot;, palette = &quot;viridis&quot;, style = &quot;cont&quot;) tm_shape(nz) + tm_polygons(col = &quot;Median_income&quot;, title = &quot;Median income (USD)&quot;, palette = &quot;viridis&quot;, style = &quot;cont&quot;) + tm_shape(nz_ports) + tm_symbols() tm_shape(nz_elev) + tm_raster(palette = &quot;-Spectral&quot;, style = &quot;cont&quot;, title = &quot;Elevation (m asl)&quot;) + tm_shape(nz_ports) + tm_symbols() ## stars object downsampled to 877 by 1140 cells. See tm_shape manual (argument raster.downsample) tm = tm_shape(nz_elev) + tm_raster(palette = &quot;-Spectral&quot;, style = &quot;cont&quot;, title = &quot;Elevation (m asl)&quot;) + tm_shape(nz_ports) + tm_symbols() 3.4 Attributes layers Table 3.2: Basic attributes layers Function Description tm_graticules() draws latitude and longitude graticules tm_scale_bar() adds a scale bar tm_compass() adds a compass rose tm_logo() adds a logo tm_credits() adds a text annotation tm + tm_graticules() + tm_scale_bar(breaks = c(0, 100, 200)) + tm_compass(position = c(&quot;right&quot;, &quot;top&quot;)) + tm_logo(&quot;https://foss4g.org/logos/2022-v2.png&quot;) + tm_credits(&quot;N. Roelandt and J. Nowosad&quot;) ## stars object downsampled to 877 by 1140 cells. See tm_shape manual (argument raster.downsample) tm2 = tm + tm_graticules() + tm_scale_bar(breaks = c(0, 100, 200)) + tm_compass(position = c(&quot;right&quot;, &quot;top&quot;)) + tm_logo(&quot;https://foss4g.org/logos/2022-v2.png&quot;) + tm_credits(&quot;N. Roelandt and J. Nowosad&quot;) 3.5 Other map elements tm2 + tm_add_legend(type = &quot;symbol&quot;, col = &quot;grey&quot;, title = &quot;Main ports&quot;) + tm_layout(main.title = &quot;New Zealand&quot;, bg.color = &quot;lightblue&quot;) ## stars object downsampled to 877 by 1140 cells. See tm_shape manual (argument raster.downsample) tm3 = tm2 + tm_add_legend(type = &quot;symbol&quot;, col = &quot;grey&quot;, title = &quot;Main ports&quot;) + tm_layout(main.title = &quot;New Zealand&quot;, bg.color = &quot;lightblue&quot;) 3.6 Interactive mode tmap_mode(&quot;view&quot;) ## tmap mode set to interactive viewing tm3 ## Credits not supported in view mode. ## Logo not supported in view mode. ## Compass not supported in view mode. ## stars object downsampled to 877 by 1140 cells. See tm_shape manual (argument raster.downsample) ## Warning: In view mode, scale bar breaks are ignored. ## only legends of type &quot;fill&quot; supported in view mode tm3 + tm_minimap() + tm_mouse_coordinates() ## Credits not supported in view mode. ## Logo not supported in view mode. ## Compass not supported in view mode. ## stars object downsampled to 877 by 1140 cells. See tm_shape manual (argument raster.downsample) ## Warning: In view mode, scale bar breaks are ignored. ## only legends of type &quot;fill&quot; supported in view mode tmap_mode(&quot;plot&quot;) ## tmap mode set to plotting tm3 ## stars object downsampled to 877 by 1140 cells. See tm_shape manual (argument raster.downsample) 3.7 Saving maps tmap_save(tm3, &quot;my_map.png&quot;) tmap_save(tm3, &quot;my_map.svg&quot;) tmap_save(tm3, &quot;my_map.html&quot;) 3.8 What else? Facet maps Animations Mapping applications tmap_tip() 3.9 More resources https://r-tmap.github.io/tmap-book/index.html https://geocompr.github.io/post/2019/tmap-grid/ https://geocompr.github.io/post/2019/tmap-color-scales/ 3.10 Exercises "],["manipulating-vector-data.html", "Chapter 4 Manipulating vector data", " Chapter 4 Manipulating vector data "],["manipulating-raster-data.html", "Chapter 5 Manipulating raster data 5.1 Raster reading 5.2 Map algebra 5.3 Transformations 5.4 Raster-vector interactions 5.5 Raster writing 5.6 Raster analysis 5.7 Exercises", " Chapter 5 Manipulating raster data library(tmap) library(sf) library(terra) The terra package contains classes and methods representing raster objects It allows raster data to be loaded and saved It allows raster algebra and raster processing It includes a number of additional functions, e.g., for analysis of terrain characteristics It allows you to work on large sets of data ?terra-package, https://rspatial.github.io/terra/reference/terra-package.html It is a successor of the raster package - http://www.rpubs.com/etiennebr/visualraster 5.1 Raster reading srtm_path = system.file(&quot;raster/srtm.tif&quot;, package = &quot;spDataLarge&quot;) srtm_path ## [1] &quot;/Users/runner/work/_temp/Library/spDataLarge/raster/srtm.tif&quot; terra - https://rspatial.github.io/terra/reference/terra-package.html srtm = rast(srtm_path) srtm ## class : SpatRaster ## dimensions : 457, 465, 1 (nrow, ncol, nlyr) ## resolution : 0.0008333333, 0.0008333333 (x, y) ## extent : -113.2396, -112.8521, 37.13208, 37.51292 (xmin, xmax, ymin, ymax) ## coord. ref. : lon/lat WGS 84 (EPSG:4326) ## source : srtm.tif ## name : srtm ## min value : 1024 ## max value : 2892 plot(srtm) tm_shape(srtm) + tm_graticules() + tm_raster(style = &quot;cont&quot;, title = &quot;elevation (m a.s.l)&quot;, palette = &quot;-Spectral&quot;) + tm_scale_bar(breaks = c(0, 2, 4), text.size = 1) + tm_credits(&quot;Jakub Nowosad, 2021&quot;) + tm_layout(inner.margins = 0, main.title = &quot;Zion National Park&quot;) ncol(srtm) ## [1] 465 nrow(srtm) ## [1] 457 nlyr(srtm) ## [1] 1 res(srtm) ## [1] 0.0008333333 0.0008333333 ext(srtm) ## SpatExtent : -113.239583212784, -112.85208321281, 37.1320834298579, 37.5129167631658 (xmin, xmax, ymin, ymax) nlcd = rast(system.file(&quot;raster/nlcd.tif&quot;, package = &quot;spDataLarge&quot;)) 5.2 Map algebra Used for a various task related to spatial raster data. It can be divided into four groups: Local - per-cell operations Focal (neighborhood operations) - most often the output cell value is the result of a 3 x 3 input cell block Zonal operations - to summarize raster values for some zones (usually irregular areas) Global - to summarize raster values for one or several rasters 5.2.1 Local operations Raster calculator Replacing values Reclassification Operations on many layers (e.g., calculating spectral indices, such as NDVI) srtm2 = srtm + 1000 srtm3 = srtm - 1024 srtm4 = srtm - 1837 srtm_new = srtm srtm_new[srtm_new &lt; 1500] = NA rcl = matrix(c(0, 1500, 1, 1500, 2000, 2, 2000, 9999, 3), ncol = 3, byrow = TRUE) rcl ## [,1] [,2] [,3] ## [1,] 0 1500 1 ## [2,] 1500 2000 2 ## [3,] 2000 9999 3 srtm_recl = classify(srtm, rcl = rcl) ?lapp landsat_path = system.file(&quot;raster/landsat.tif&quot;, package = &quot;spDataLarge&quot;) landsat = rast(landsat_path) landsat ## class : SpatRaster ## dimensions : 1428, 1128, 4 (nrow, ncol, nlyr) ## resolution : 30, 30 (x, y) ## extent : 301905, 335745, 4111245, 4154085 (xmin, xmax, ymin, ymax) ## coord. ref. : WGS 84 / UTM zone 12N (EPSG:32612) ## source : landsat.tif ## names : landsat_1, landsat_2, landsat_3, landsat_4 ## min values : 7550, 6404, 5678, 5252 ## max values : 19071, 22051, 25780, 31961 https://bleutner.github.io/RStoolbox/rstbx-docu/spectralIndices.html \\[ \\begin{split} NDVI&amp;= \\frac{\\text{NIR} - \\text{Red}}{\\text{NIR} + \\text{Red}}\\\\ \\end{split} \\] ndvi_fun = function(nir, red){ (nir - red) / (nir + red) } ndvi = lapp(landsat[[c(4, 3)]], fun = ndvi_fun) 5.2.2 Focal operations ?focal srtm_focal_mean = focal(srtm, w = matrix(1, nrow = 3, ncol = 3), fun = mean) 5.2.3 Zonal operations ?zonal Also known as zonal statistics. Result - a summary table srtm_utm = project(srtm, nlcd, method = &quot;bilinear&quot;) srtm_zonal = zonal(srtm_utm, nlcd, na.rm = TRUE, fun = &quot;mean&quot;) srtm_zonal ## levels srtm ## 1 Water 2227.060 ## 2 Developed 1699.510 ## 3 Barren 1853.950 ## 4 Forest 1996.807 ## 5 Shrubland 1650.796 ## 6 Herbaceous 1644.282 ## 7 Cultivated 1288.272 ## 8 Wetlands 1262.578 5.2.4 Global operations global(srtm, fun = &quot;mean&quot;) ## mean ## srtm 1842.548 global(srtm, fun = &quot;sd&quot;) ## sd ## srtm 416.6776 freq(nlcd) ## layer value count ## 1 1 Water 1209 ## 2 1 Developed 17517 ## 3 1 Barren 106070 ## 4 1 Forest 767537 ## 5 1 Shrubland 545771 ## 6 1 Herbaceous 4878 ## 7 1 Cultivated 8728 ## 8 1 Wetlands 6497 5.3 Transformations 5.3.1 Resampling srtm ## class : SpatRaster ## dimensions : 457, 465, 1 (nrow, ncol, nlyr) ## resolution : 0.0008333333, 0.0008333333 (x, y) ## extent : -113.2396, -112.8521, 37.13208, 37.51292 (xmin, xmax, ymin, ymax) ## coord. ref. : lon/lat WGS 84 (EPSG:4326) ## source : srtm.tif ## name : srtm ## min value : 1024 ## max value : 2892 new_srtm = srtm res(new_srtm) = 0.001 new_srtm ## class : SpatRaster ## dimensions : 381, 387, 1 (nrow, ncol, nlyr) ## resolution : 0.001, 0.001 (x, y) ## extent : -113.2396, -112.8526, 37.13208, 37.51308 (xmin, xmax, ymin, ymax) ## coord. ref. : lon/lat WGS 84 (EPSG:4326) srtm2 = resample(srtm, new_srtm, method = &quot;bilinear&quot;) # method! srtm2 ## class : SpatRaster ## dimensions : 381, 387, 1 (nrow, ncol, nlyr) ## resolution : 0.001, 0.001 (x, y) ## extent : -113.2396, -112.8526, 37.13208, 37.51308 (xmin, xmax, ymin, ymax) ## coord. ref. : lon/lat WGS 84 (EPSG:4326) ## source : memory ## name : srtm ## min value : 1032.44 ## max value : 2891.25 5.3.2 Reprojecting rasters crs(srtm, describe = TRUE) ## name authority code area extent ## 1 WGS 84 EPSG 4326 &lt;NA&gt; NA, NA, NA, NA hist(srtm) https://projectionwizard.org/ srtm_utm = project(srtm, &quot;EPSG:32612&quot;, method = &quot;bilinear&quot;) crs(srtm_utm, describe = TRUE) ## name authority code ## 1 WGS 84 / UTM zone 12N EPSG 32612 ## area ## 1 Between 114°W and 108°W, northern hemisphere between equator and 84°N, onshore and offshore. Canada - Alberta; Northwest Territories (NWT); Nunavut; Saskatchewan. Mexico. United States (USA) ## extent ## 1 -114, -108, 84, 0 5.4 Raster-vector interactions Raster cropping and masking Raster extraction - by points, lines, and polygons Rasterization - points, lines, polygons to rasters Vectorization - rasters to polygons or contours 5.4.1 Raster cropping and masking library(sf) zion = read_sf(system.file(&quot;vector/zion.gpkg&quot;, package = &quot;spDataLarge&quot;)) srtm_utm_c = crop(srtm_utm, vect(zion)) Raster masking is usually done together with cropping. srtm_utm_m = mask(srtm_utm_c, vect(zion)) 5.4.2 Raster extraction zion_points = read_sf(system.file(&quot;vector/zion_points.gpkg&quot;, package = &quot;spDataLarge&quot;)) zion_extract = terra::extract(srtm, vect(zion_points)) zion_points = cbind(zion_points, zion_extract) zion_points ## Simple feature collection with 30 features and 2 fields ## Geometry type: POINT ## Dimension: XY ## Bounding box: xmin: -113.2077 ymin: 37.16632 xmax: -112.8717 ymax: 37.43165 ## Geodetic CRS: WGS 84 ## First 10 features: ## ID srtm geom ## 1 1 1802 POINT (-112.9159 37.20013) ## 2 2 2433 POINT (-113.0937 37.39263) ## 3 3 1886 POINT (-113.0246 37.33466) ## 4 4 1370 POINT (-112.9611 37.24326) ## 5 5 1452 POINT (-112.9898 37.20847) ## 6 6 1635 POINT (-112.8807 37.19319) ## 7 7 1380 POINT (-113.0505 37.24061) ## 8 8 2032 POINT (-113.0953 37.34965) ## 9 9 1830 POINT (-113.0362 37.31429) ## 10 10 1860 POINT (-113.2077 37.43165) zion = read_sf(system.file(&quot;vector/zion.gpkg&quot;, package = &quot;spDataLarge&quot;)) zion = st_transform(zion, crs(srtm)) zion_srtm_values = terra::extract(srtm, vect(zion)) head(zion_srtm_values) ## ID srtm ## 1 1 1666 ## 2 1 1677 ## 3 1 1708 ## 4 1 1735 ## 5 1 1751 ## 6 1 1770 zion_srtm_values = terra::extract(srtm, vect(zion)) library(dplyr) zion_srtm_values %&gt;% group_by(ID) %&gt;% summarize(across(srtm, list(min = min, mean = mean, max = max))) ## # A tibble: 1 × 4 ## ID srtm_min srtm_mean srtm_max ## &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 1 1122 1818. 2661 5.5 Raster writing https://geocompr.robinlovelace.net/read-write.html#data-output https://gdal.org/drivers/raster/gtiff.html writeRaster(nlcd, filename = &quot;nlcd1.tif&quot;, gdal = c(&quot;COMPRESS=NONE&quot;)) writeRaster(nlcd, filename = &quot;nlcd2.tif&quot;, datatype = &quot;INT1U&quot;) writeRaster(nlcd, filename = &quot;nlcd3.tif&quot;, filetype = &quot;COG&quot;) 5.6 Raster analysis 5.6.1 Predictions landsat_path = system.file(&quot;raster/landsat.tif&quot;, package = &quot;spDataLarge&quot;) landsat = rast(landsat_path) zion_points_utm = zion_points_utm = st_transform(zion_points, crs = crs(landsat)) landsat_s = stretch(landsat, maxq = 0.98) plotRGB(landsat_s, r = 3, g = 2, b = 1) plot(st_geometry(zion_points_utm), add = TRUE, col = &quot;red&quot;, cex = 3) ?predict - glm, randomForest, prcomp zion_points_utm_v = extract(landsat_s, vect(zion_points_utm)) pca = prcomp(zion_points_utm_v[-1]) pca ## Standard deviations (1, .., p=4): ## [1] 83.689718 24.939305 9.388554 3.530974 ## ## Rotation (n x k) = (4 x 4): ## PC1 PC2 PC3 PC4 ## landsat_1 -0.5080760 0.20402128 -0.68068384 -0.4867274 ## landsat_2 -0.5321682 0.07684548 -0.17022642 0.8257813 ## landsat_3 -0.5783656 0.31318090 0.70849728 -0.2558175 ## landsat_4 -0.3523479 -0.92433101 0.07565763 -0.1254554 ?predict - glm, randomForest, prcomp pca_pred = predict(landsat_s, pca) plot(pca_pred) 5.6.2 Interpolations ?interpolate zion_points_srtm = extract(srtm_utm, vect(zion_points_utm)) library(fields) tps = Tps(st_coordinates(zion_points_utm), zion_points_utm$srtm) rt = rast(srtm_utm) interp1 = interpolate(rt, tps) plot(interp1) library(gstat) interpolate_gstat = function(model, x, crs, ...) { v = st_as_sf(x, coords = c(&quot;x&quot;, &quot;y&quot;), crs = crs) p = predict(model, v, ...) as.data.frame(p)[, 1:2] } v = variogram(srtm ~ 1, data = zion_points_utm) # plot(v) mv = fit.variogram(v, vgm(120000, &quot;Exp&quot;, 12000, nugget = 10000)) plot(v, model = mv) g_OK = gstat(NULL, &quot;srtm&quot;, srtm ~ 1, zion_points_utm, model = mv) OK = interpolate(rt, g_OK, debug.level = 0, fun = interpolate_gstat, crs = crs(rt), index = 1) plot(OK) 5.6.3 Segmentations https://github.com/Nowosad/supercells library(supercells) ortho = rast(system.file(&quot;raster/ortho.tif&quot;, package = &quot;supercells&quot;)) plot(ortho) ortho_slic1 = supercells(ortho, k = 200, compactness = 10) plot(ortho) plot(st_geometry(ortho_slic1), add = TRUE) rgb_to_hex = function(x){ apply(t(x), 2, function(x) rgb(x[1], x[2], x[3], maxColorValue = 255)) } avg_colors = rgb_to_hex(st_drop_geometry(ortho_slic1[4:6])) plot(ortho) plot(st_geometry(ortho_slic1), add = TRUE, col = avg_colors) 5.7 Exercises "],["summary.html", "Summary", " Summary class: inverse, left, bottom # Summary Many resources are available: terra - https://rspatial.github.io/terra/reference/terra-package.html and https://rspatial.org/terra/index.html raster - https://rspatial.org/raster/ and https://rpubs.com/etiennebr/visualraster stars - https://r-spatial.github.io/stars/index.html and https://r-spatial.org/book/ https://geocompr.github.io/ https://spacetimewithr.org/Spatio-Temporal%20Statistics%20with%20R.pdf https://jean-romain.github.io/lidRbook/index.html More… Sometimes conversion between classes is crucial! Ask for help, if needed: https://stackoverflow.com/questions/tagged/r https://gis.stackexchange.com/questions/tagged/r https://community.rstudio.com/ https://stat.ethz.ch/mailman/listinfo/r-sig-geo Contribute something: https://github.com/ Provide suggestions Write bugs reports Make improvements to the documentation, e.g., clarifying unclear sentences, fixing typos Make changes to the code, e.g., to do things in a more efficient way Share your work with #rspatial on Twitter "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
